---
title: "AEA Virtual Spring Conference R training - Day 2"
author: "Eirini Zormpa"
institute: "The Alan Turing Institute"
format:
  revealjs:
    theme: [moon, custom.scss]
    logo: images/rsf-logo-white.png
    slide-numner: true
from: markdown+emoji
---

## Yesterday you learned how to:

:::: {.columns}

::: {.column width="50%"}
- :white_check_mark: Interact with the RStudio GUI, 
- :white_check_mark: Set up projects, 
- :white_check_mark: Create files from RStudio, 
- :white_check_mark: Assign values to objects, 
- :white_check_mark: Use functions, 
- :white_check_mark: Create and subset vectors, 
- :white_check_mark: Work with missing data 
:::

::: {.column width="50%"}
- :white_check_mark: Read data into R
- :white_check_mark: Understand and manipulate `tibbles`
- :white_check_mark: Understand and manipulate `factors`
- :x: Alternate between date formats
:::

::::

## Dates

To avoid ambiguity, use the [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) standard: **YYYYMMDD** (or YYYY-MM-DD).

![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Date_format_by_country_revised.svg/1600px-Date_format_by_country_revised.svg.png){width=810 height=450}

::: aside
This [image](https://en.m.wikipedia.org/wiki/File:Date_format_by_country_revised.svg) was created for [Wikimedia Commons](https://commons.wikimedia.org/wiki/Main_Page) and is used under a [CC-BY-SA licence](https://creativecommons.org/licenses/by-sa/4.0/).
:::

# Part 3: Data wrangling with `dplyr` and `tidyr`

## Learning objectives - part 3

- Subset columns or rows with `select` or `filter` and create new columns with `mutate`.
- Link the output of one function to the input of another function with the ‘pipe’ operator `%>%`.
- Use `summarise`, `group_by`, and `count` to split a data frame into groups of observations, apply summary statistics for each group, and then combine the results.
- Export a dataframe to a .csv and .tsv file.

## Exercise 3.1

:alarm_clock: **5 mins**

```{r}
countdown::countdown(minutes = 5)
```


Using pipes, subset the `surveys` data to include artefacts collected before 1995 and retain only the columns `plot_id`, `diagnostic`, and `diameter.`


## Exercise 3.1 solution

```{r}
#| echo: true
#| eval: false

surveys %>%
  filter(year < 1995) %>%
  select(plot_id, diagnostic, diameter)

```

. . .

Note that if you `select` before you `filter`, your code won't run.
That's because you're not retaining the variable that you use in your filtering.
When piping, **order matters**!

## Exercise 3.2

:alarm_clock: **10 mins**

```{r}
countdown::countdown(minutes = 10)
```

Create a new data frame from the `surveys` data that meets the following criteria:

- contains only the `period` column and a new column called `length_cm` containing the length values (currently in mm) converted to centimeters.
- In this `length_cm` column, there are no `NA`s and
- All values in the `length_cm` are less than `3`.

## Exercise 3.2 solution

```{r}
#| echo: true
#| eval: false

surveys_length_cm <- surveys %>%
  filter(!is.na(length)) %>%
  mutate(length_cm = length / 10) %>%
  filter(length_cm < 3) %>%
  select(period, length_cm)

```


## Exercise 3.3

:alarm_clock: **10 mins**

```{r}
countdown::countdown(minutes = 10)
```

1. How many artefacts were found for each `recovery_method`?
2. Use `group_by()` and `summarise()` to find the mean, min, and max length for each ceramic_type (using `period`). Also add the number of observations (hint: see `?n`)
3. What was the widest artefact measured in each year? Return the columns `year`, `decoration_type`, `period`, and `diameter`.


## Exercise 3.3 solution

```{r}
#| echo: true
#| eval: false

1.
surveys %>%
    count(recovery_method)

2. 
surveys %>%
    filter(!is.na(length)) %>%
    group_by(period) %>%
    summarize(
        mean_length = mean(length),
        min_length = min(length),
        max_length = max(length),
        n = n()
    )

3.
surveys %>%
  filter(!is.na(diameter)) %>%
  group_by(year) %>%
  filter(diameter == max(diameter)) %>%
  select(year, decoration_type, ceramic_type, diameter) %>%
  arrange(year)

```

## Interim summary 3

- :white_check_mark: Subset columns or rows with `select` or `filter` and create new columns with `mutate`.
- :white_check_mark: Link the output of one function to the input of another function with the ‘pipe’ operator `%>%`.
- :white_check_mark: Use `summarise`, `group_by`, and `count` to split a data frame into groups of observations, apply summary statistics for each group, and then combine the results.
- :white_check_mark: Export a dataframe to a `.csv` and `.tsv` file.

# Break

# Part 4: Data visualisation with `ggplot2`

## Learning objectives - part 4

- Produce scatter plots, boxplots, and time-series plots
- Set universal plot settings
- Describe what faceting is and apply faceting
- Modify the aesthetics of an existing `ggplot` plot (including axis labels and color)
- Build complex and customised plots from data in a data frame

## Why `ggplot2`?

```{=html}
<iframe width="780" height="500" src="https://r-graph-gallery.com/all-graphs.html" title="R Graph Gallery"></iframe>
```

::: aside
[The R Graph Gallery](https://r-graph-gallery.com/all-graphs.html)
:::

## `ggplot2`
<p style="text-align: center;">![](https://raw.githubusercontent.com/tidyverse/ggplot2/master/pkgdown/favicon/apple-touch-icon-120x120.png){width="25%" height="25%"}</p>


[**ggplot2**](https://ggplot2.tidyverse.org/) is a package (included in the `tidyverse`) for creating highly customisable plots that are built step-by-step by adding layers.

The separation of a plot into layers allows a high degree of flexibility with minimal effort.

## `ggplot2` layers

:::: {.columns}
::: {.column width="65%"}

![](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/ggplot2_masterpiece.png){fig-alt="A fuzzy monster in a beret and scarf, critiquing their own column graph on a canvas in front of them while other assistant monsters (also in berets) carry over boxes full of elements that can be used to customize a graph (like themes and geometric shapes). In the background is a wall with framed data visualizations. Stylized text reads “ggplot2: build a data masterpiece."}

:::

::: {.column width="35%"}

<br>
<br>
<br>
<br>

```
<DATA> %>%
  ggplot(aes(<MAPPINGS>)) +
  <GEOM_FUNCTION>() +
  <CUSTOMISATION>
```
:::

::::

::: aside
Artwork by [Allison Horst](https://allisonhorst.com/), reused under a CC-BY licence.
:::

# Data visualisation crash-course

## Aesthetics

> Whenever we visualise data, we take data values and convert them in a systematic and logical way into the visual elements that make up the final graphic. [...] All data visualisations map data values into quantifiable features of the resulting graphic. We refer to these features as **aesthetics**.

::: aside
Quote from Claus Wilke's [*Fundamentals of Data Visualization*](https://clauswilke.com/dataviz).
:::

### Commonly-used aesthetics

:::: {.columns}
::: {.column width="50%"}
- position (*x* and *y* coordinates),
- colour
- size
:::

::: {.column width="50%"}
- shape
- line type
:::

::::

## Find the green dot lvl. :one:

```{r}
library(dplyr)
library(ggplot2)
library(viridisLite)
library(hexbin)
```


```{r}
plot1 <- data.frame(x = rnorm(100, 10, 1),
                    y = rnorm(100, 10, 1),
                    z = c(rep("a", 99), "b"))
plot2 <- data.frame(x = rnorm(100, 10, 1),
                    y = rnorm(100, 10, 1),
                    z = c(rep("b", 99), "a"))
plot3 <- data.frame(x = rnorm(100, 10, 1),
                    y = rnorm(100, 10, 1),
                    z = c(rep("a", 33), rep("b", 66), rep("a", 1)),
                    aa = c(rep("a", 66), rep("b", 34)))
```

```{r}
plot1 %>%
  ggplot(aes(x = x, y = y, colour = z)) +
  geom_point(size = 2.5) +
  scale_colour_manual(values=c("tomato", "#7aeb7a")) +
  labs(x = "", y = "", title = "Colour only, N = 100") +
  theme(legend.position = "none",
        plot.title = element_text(size=22),
        axis.text = element_blank(),
        axis.ticks = element_blank())
```

::: aside
Inspired by Kieran Healy's [*Data Visualization: A practical introduction*](https://socviz.co/).
:::

## Find the green dot lvl. :two:

```{r}
plot2 %>%
  ggplot(aes(x = x, y = y, shape = z)) +
  geom_point(colour = "#7aeb7a", size = 2.5) +
  labs(x = "", y = "", title = "Shape only, N = 100") +
  theme(legend.position = "none",
        plot.title = element_text(size=22),
        axis.text = element_blank(),
        axis.ticks = element_blank())
```

::: aside
Inspired by Kieran Healy's [*Data Visualization: A practical introduction*](https://socviz.co/).
:::

## Find the green dot lvl. :three:

```{r}
plot3 %>%
  ggplot(aes(x = x, y = y, shape = z, colour = aa)) +
  geom_point(size = 2.5) +
  scale_colour_manual(values=c("tomato", "#7aeb7a")) +
  labs(x = "", y = "", title = "Colour and Shape, N = 100") +
  theme(plot.title = element_text(size=22),
        legend.position = "none",
        axis.text = element_blank(),
        axis.ticks = element_blank())
```

::: aside
Inspired by Kieran Healy's [*Data Visualization: A practical introduction*](https://socviz.co/).
:::

## Colour considerations

In the previous game, people with the most common type of colour-blindness would have struggled to perceive the colour distinction :scream:

![](https://upload.wikimedia.org/wikipedia/commons/a/af/Color_blindness.png){fig-alt="A comparison of the visible color spectrum in common types of color blindness. For people with Deuteranomaly, affecting 2.7% of the population, red and green are difficult to distinguish from one another."}

## Viridis palettes


:::: {.columns}
::: {.column width="50%"}

Are colourblind-friendly...

```{r}
#| fig.dim = c(5, 2)

n = 200

image(
1:n, 1, as.matrix(1:n),
col = viridis(n),
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n"
)
title(main = "viridis")
```

```{r}
#| fig.dim = c(5, 2)

image(
1:n, 1, as.matrix(1:n),
col = inferno(n),
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n"
)
title(main = "inferno")
```
:::

::: {.column width="50%"}

... and they're very pretty :heart_eyes::sparkles:

```{r}
#| fig.dim = c(4.75, 4.75)
dat <- data.frame(x = rnorm(10000), y = rnorm(10000))
ggplot(dat, aes(x = x, y = y)) +
  geom_hex() + coord_fixed() +
  scale_fill_gradientn(colours = viridis(256, option = "D")) +
  labs(x = "", y = "")
```


:::

::::

::: aside
from the [`viridisLite` site](https://sjmgarnier.github.io/viridisLite/reference/viridis.html) by Simon Garnier
:::

# Data visualisation exercises

## Exercise 4.1

:alarm_clock: **5 mins**

```{r}
countdown::countdown(minutes = 5)
```

Use what you just learned to create a scatter plot of `diameter` over `period` with the plot types showing in different colors. Is this a good way to show this type of data?

## Exercise 4.1 solution

```{r}
#| echo: false
#| eval: true
library(tidyverse)

surveys_complete <- read_csv("../data_clean/surveys_complete.csv")
```


```{r}
#| echo: true
#| eval: true

ggplot(data = surveys_complete,
       mapping = aes(x = period, y = diameter)) +
   geom_point(aes(color = recovery_method))
```



## Exercise 4.2

:alarm_clock: **10 mins**

```{r}
countdown::countdown(minutes = 10)
```

1. Replace the box plot with a violin plot; see `geom_violin()`.
2. Represent `diameter` on the `log10` scale; see `scale_y_log10()`.
3. So far, we’ve looked at the distribution of `diameter` within periods. Try making a new plot to explore the distribution of another variable within each period.

## Exercise 4.2 solution

```{r}
#| echo: true
#| eval: true

ggplot(data = surveys_complete, mapping = aes(x = period, y = diameter)) +
  geom_violin(alpha = 0.5)

```
## Exercise 4.2 solution

```{r}
#| echo: true
#| eval: true

ggplot(data = surveys_complete, mapping = aes(x = period, y = diameter)) +
  geom_violin(alpha = 0.5) +
  scale_y_log10()
```

## Exercise 4.2 solution

```{r}
#| echo: true
#| eval: true

ggplot(data = surveys_complete, mapping = aes(x = period, y = length)) +
  geom_violin(alpha = 0.5)
```

# Exercise 4.3

:alarm_clock: **5 mins**

```{r}
countdown::countdown(minutes = 5)
```

Build the previous plot again and experiment with at least two themes.

Which do you like best?

:::: {.columns}
::: {.column width="50%"}

`theme_minimal`  
`theme_void`  
`theme_classic`  
:::

::: {.column width="50%"}
`theme_dark`  
`theme_grey`  
`theme_light`
:::

::::

## Exercise 4.3: My preference

I prefer the white background of `theme_minimal` and I like that it retains the major grid, though that's slightly controversial.

I also like that it gets rid of the black box around the plot.

## This is just the beginning!

`ggplot2` and compatible packages give you a huge amount of flexibility to create *exactly* the graph you want!

You can explore packages that let you play around with:

- beautiful palettes (e.g. `ghibli`, `wesanderson`),
- new themes (e.g. `hrbrthemes`)
- additional fonts (e.g. `extrafont`)
- animated graphs (e.g. `gganimate`)
- and so much more!

# Thank you for your attention :sparkles:
You can contact me at ezormpa@turing.ac.uk if you have questions in the coming days!
